wellsLocationTable <- read.table("wells-location.txt", header = TRUE, sep = "|", stringsAsFactors = FALSE)
colnames(wellsLocationTable) <- c("Borehole", "latitude", "longitude", "altitude.ft")
# "Merge table one and table two by column 'Borehole'
owelltables <- merge(owellMetals, owellChems,by="Borehole")
# "Merge 'owelltables' and 'WellsLocationTable' by 'Borehole'
finalTable <- merge(owelltables,wellsLocationTable, by = "Borehole")
#finalTable
#create a vector for 'fault'
fault <-c(0,4000,0,1000,1500,4000,0,3000,2000,5000,0,4000,2000,2000,5000,4000,3000,5000,10000,8000,9000,5000,0)
finalTable$fault <- fault
#finalTable
#create a vector for "geography"
geology <- c("Granite","Granite","Alkaline Granite","Alkaline Granite","Granite","Volcanic Rock","Gypsum","Alkaline Granite","Gypsum","Volcanic Rock","Alkaline Granite","Granite","Gypsum","Gypsum","Volcanic Rock","Volcanic Rock","Gypsum","Sand","Sand","Sand","Sand","Sand","Alkaline Granite")
# Add the geology to the finalTable
finalTable$geology <- geology
#tested table, left as artifac for easy testing
#finalTable
# create a list with dataframes
list1 = list(owellChems,owellMetals)
names(list1) =c("wells$saudi$chemistry","wells$saudi$metals")
list1
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
readFromPipe = function(file, header=TRUE, quote="", sep="|")
{
utils::read.csv(file, header=header, quote=quote, sep=sep);
}
if (which.github !="remote")
{
myfile = paste0(mypath,"well.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"well.txt")
#storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"well.txt")
print("myfile")
}
myfile
if (which.github !="remote")
{
myfile = paste0(mypath,"well.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
#storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
""
""
/
if (which.github !="remote")
{
myfile = paste0(mypath,"wellksjdfa.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
#storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
if (which.github !="remote")
{
myfile = paste0(mypath,"wellksjdfa.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
if (which.github !="remote")
{
myfile = paste0(mypath,"wellksjdfa.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
which.github ="local"
github.local = "C:/git/GregRehkemper/WSUStats419/"
github.remote = "https://github.com/GregRehkemper/WSUStats419/tree/HEAD/"
if (which.github =="remote")
{
mypath = github.remote
}else
{
mypath = github.local
}
#well.Location.Raw = https://raw.githubusercontent.com/GregRehkemper/WSUStats419/main/o-well/wells-location.txt?token=ASUPSE7VGFM3RGCMWSKDPPDAFIFC2
#read in Data from table 1, table 2 as excel files, and convert wellslocation to table from txt file and  columns  to standardize language '
library(readxl)
owellMetals <- read_excel("owelltable1.xlsx")
owellChems <- read_excel("owelltable2.xlsx")
wellsLocationTable <- read.table("wells-location.txt", header = TRUE, sep = "|", stringsAsFactors = FALSE)
colnames(wellsLocationTable) <- c("Borehole", "latitude", "longitude", "altitude.ft")
# "Merge table one and table two by column 'Borehole'
owelltables <- merge(owellMetals, owellChems,by="Borehole")
# "Merge 'owelltables' and 'WellsLocationTable' by 'Borehole'
finalTable <- merge(owelltables,wellsLocationTable, by = "Borehole")
#finalTable
#create a vector for 'fault'
fault <-c(0,4000,0,1000,1500,4000,0,3000,2000,5000,0,4000,2000,2000,5000,4000,3000,5000,10000,8000,9000,5000,0)
finalTable$fault <- fault
#finalTable
#create a vector for "geography"
geology <- c("Granite","Granite","Alkaline Granite","Alkaline Granite","Granite","Volcanic Rock","Gypsum","Alkaline Granite","Gypsum","Volcanic Rock","Alkaline Granite","Granite","Gypsum","Gypsum","Volcanic Rock","Volcanic Rock","Gypsum","Sand","Sand","Sand","Sand","Sand","Alkaline Granite")
# Add the geology to the finalTable
finalTable$geology <- geology
#tested table, left as artifac for easy testing
#finalTable
# create a list with dataframes
list1 = list(owellChems,owellMetals)
names(list1) =c("wells$saudi$chemistry","wells$saudi$metals")
list1
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
if (which.github !="remote")
{
myfile = paste0(mypath,"wellksjdfa.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
which.github ="local"
github.local = "C:/git/GregRehkemper/WSUStats419/"
github.remote = "https://github.com/GregRehkemper/WSUStats419/tree/HEAD/"
if (which.github =="remote")
{
mypath = github.remote
}else
{
mypath = github.local
}
#well.Location.Raw = https://raw.githubusercontent.com/GregRehkemper/WSUStats419/main/o-well/wells-location.txt?token=ASUPSE7VGFM3RGCMWSKDPPDAFIFC2
#read in Data from table 1, table 2 as excel files, and convert wellslocation to table from txt file and  columns  to standardize language '
library(readxl)
owellMetals <- read_excel("owelltable1.xlsx")
owellChems <- read_excel("owelltable2.xlsx")
wellsLocationTable <- read.table("wells-location.txt", header = TRUE, sep = "|", stringsAsFactors = FALSE)
colnames(wellsLocationTable) <- c("Borehole", "latitude", "longitude", "altitude.ft")
# "Merge table one and table two by column 'Borehole'
owelltables <- merge(owellMetals, owellChems,by="Borehole")
# "Merge 'owelltables' and 'WellsLocationTable' by 'Borehole'
finalTable <- merge(owelltables,wellsLocationTable, by = "Borehole")
#finalTable
#create a vector for 'fault'
fault <-c(0,4000,0,1000,1500,4000,0,3000,2000,5000,0,4000,2000,2000,5000,4000,3000,5000,10000,8000,9000,5000,0)
finalTable$fault <- fault
#finalTable
#create a vector for "geography"
geology <- c("Granite","Granite","Alkaline Granite","Alkaline Granite","Granite","Volcanic Rock","Gypsum","Alkaline Granite","Gypsum","Volcanic Rock","Alkaline Granite","Granite","Gypsum","Gypsum","Volcanic Rock","Volcanic Rock","Gypsum","Sand","Sand","Sand","Sand","Sand","Alkaline Granite")
# Add the geology to the finalTable
finalTable$geology <- geology
#tested table, left as artifac for easy testing
#finalTable
# create a list with dataframes
list1 = list(owellChems,owellMetals)
names(list1) =c("wells$saudi$chemistry","wells$saudi$metals")
list1
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
if (which.github !="remote")
{
myfile = paste0(mypath,"wellksjdfa.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
which.github ="local"
github.local = "C:/git/GregRehkemper/WSUStats419/"
github.remote = "https://github.com/GregRehkemper/WSUStats419/tree/HEAD/"
if (which.github =="remote")
{
mypath = github.remote
}else
{
mypath = github.local
}
#well.Location.Raw = https://raw.githubusercontent.com/GregRehkemper/WSUStats419/main/o-well/wells-location.txt?token=ASUPSE7VGFM3RGCMWSKDPPDAFIFC2
#read in Data from table 1, table 2 as excel files, and convert wellslocation to table from txt file and  columns  to standardize language '
library(readxl)
owellMetals <- read_excel("owelltable1.xlsx")
owellChems <- read_excel("owelltable2.xlsx")
wellsLocationTable <- read.table("wells-location.txt", header = TRUE, sep = "|", stringsAsFactors = FALSE)
colnames(wellsLocationTable) <- c("Borehole", "latitude", "longitude", "altitude.ft")
# "Merge table one and table two by column 'Borehole'
owelltables <- merge(owellMetals, owellChems,by="Borehole")
# "Merge 'owelltables' and 'WellsLocationTable' by 'Borehole'
finalTable <- merge(owelltables,wellsLocationTable, by = "Borehole")
#finalTable
#create a vector for 'fault'
fault <-c(0,4000,0,1000,1500,4000,0,3000,2000,5000,0,4000,2000,2000,5000,4000,3000,5000,10000,8000,9000,5000,0)
finalTable$fault <- fault
#finalTable
#create a vector for "geography"
geology <- c("Granite","Granite","Alkaline Granite","Alkaline Granite","Granite","Volcanic Rock","Gypsum","Alkaline Granite","Gypsum","Volcanic Rock","Alkaline Granite","Granite","Gypsum","Gypsum","Volcanic Rock","Volcanic Rock","Gypsum","Sand","Sand","Sand","Sand","Sand","Alkaline Granite")
# Add the geology to the finalTable
finalTable$geology <- geology
#tested table, left as artifac for easy testing
#finalTable
# create a list with dataframes
list1 = list(owellChems,owellMetals)
names(list1) =c("wells$saudi$chemistry","wells$saudi$metals")
list1
#store to pipe
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
if (which.github !="remote")
{
myfile = paste0(mypath,"wellksjdfa.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"wellksjdfa.txt")
storeToPipe(list1,file = myfile)
} else{
print("Hello")
myfile = paste0(mypath,"wellksjdfa.txt")
print("should not print")
}
myfile
if (which.github !="remote")
{
myfile = paste0(mypath,"well.rds")
saveRDS(list1,file = myfile)
myfile = paste0(mypath,"well.txt")
storeToPipe(list1,file = myfile)
} else{
myfile = paste0(mypath,"well.txt")
}
# install packages
install.packages("corrplot")
install.packages("RcolorBrewer")
install.packages("devtools")
devtools::install_github("taiyun/corrplot", build_vignettes = TRUE
install.packages("devtools")
which.github ="local"
github.local = "C:/git/GregRehkemper/WSUStats419/o-well/"
github.remote = "https://github.com/GregRehkemper/WSUStats419/tree/HEAD/"
if (which.github =="remote")
{
mypath = github.remote
}else
{
mypath = github.local
}
mypath
#local_owell_Table <- read.delim("C:/git/GregRehkemper/WSUStats419/o-well/owellTableClean.csv", sep = ",",header = T)
which.github ="local"
github.local = "C:/git/GregRehkemper/WSUStats419/o-well/"
github.remote = "https://github.com/GregRehkemper/WSUStats419/tree/HEAD/"
if (which.github =="remote")
{
mypath = github.remote
}else
{
mypath = github.local
}
mypath
#local_owell_Table <- read.delim("C:/git/GregRehkemper/WSUStats419/o-well/owellTableClean.csv", sep = ",",header = T)
# Read in OWell dataframe, cleaned offline and reuploaded, to begin manipulation
library(readxl)
rawTable <- read.csv("owellTableClean.csv",header = T)
#rawTable
# Checking data to ensure proper importation. This was left to show the process, not for final report
#colnames (rawTable)
# head(rawTable)
#tail(rawTable)
# columns are properly aligned, Data appears to be complete
#Starting by looking into the distance from the Fault lines
library(corrplot)
library(RColorBrewer)
plot(rawTable$fault)
#comparedf(rawTable.fault, rawtable)
faults <- (rawTable$fault)
plot(faults, rawTable$pH, main = "PH change over distance from Fault",ylab = "Ph", type = "h", col = "red")
plot(faults, rawTable$altitude.ft, main = "Altitude change over distance from Fault",ylab = "Alt", type = "h", col = "red")
plot(rawTable$altitude.ft, rawTable$pH, main = "Ph Related to Altitude", xlab = "PH", ylab ="Altitude", type = "h")
#Compare(rawTable$altitude.ft, rawTable$pH)
corFaults <- rawFault <- rawTable$fault
rawTableMatrix <- matrix(c(rawTable))
corrplot(rawTableMatrix) #, type = "upper", order = "hclust", col = brewer.pal(n = 8, name= "RdYlBu"))
# install packages
install.packages("corrplot")
install.packages("RcolorBrewer")
intall.packages("Rtools")
#Starting by looking into the distance from the Fault lines
# library(corrplot)
# library(RColorBrewer)
plot(rawTable$fault)
#comparedf(rawTable.fault, rawtable)
faults <- (rawTable$fault)
plot(faults, rawTable$pH, main = "PH change over distance from Fault",ylab = "Ph", type = "h", col = "red")
plot(faults, rawTable$altitude.ft, main = "Altitude change over distance from Fault",ylab = "Alt", type = "h", col = "red")
plot(rawTable$altitude.ft, rawTable$pH, main = "Ph Related to Altitude", xlab = "PH", ylab ="Altitude", type = "h")
# #Compare(rawTable$altitude.ft, rawTable$pH)
# corFaults <- rawFault <- rawTable$fault
#
# rawTableMatrix <- matrix(c(rawTable))
# corrplot(rawTableMatrix) #, type = "upper", order = "hclust", col = brewer.pal(n = 8, name= "RdYlBu"))
#
#
#
# #with(rawTable, plot(rawTable$altitude.ft,rawTable$B))
#The Distance from Faults looked to have a relationship with both Altitude and PH,
#I wanted to look into that.
library("ggpubr")
# install packages
# install.packages("corrplot")
# install.packages("RcolorBrewer")
# intall.packages("Rtools")
# install.packages("devtools")
# devtools::install_github("taiyun/corrplot", build_vignettes = TRUE
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
#The Distance from Faults looked to have a relationship with both Altitude and PH,
#I wanted to look into that.
library("ggpubr")
#The Distance from Faults looked to have a relationship with both Altitude and PH,
#I wanted to look into that.
library("ggpubr")
#The Distance from Faults looked to have a relationship with both Altitude and PH,
#I wanted to look into that.
library("ggpubr")
#Starting by looking into the distance from the Fault lines
# library(corrplot)
# library(RColorBrewer)
plot(rawTable$fault)
#comparedf(rawTable.fault, rawtable)
faults <- (rawTable$fault)
par(mfrow=c(2,2))
plot(faults, rawTable$pH, main = "PH change over distance from Fault",ylab = "Ph", type = "h", col = "red")
plot(faults, rawTable$altitude.ft, main = "Altitude change over distance from Fault",ylab = "Alt", type = "h", col = "red")
plot(rawTable$altitude.ft, rawTable$pH, main = "Ph Related to Altitude", xlab = "PH", ylab ="Altitude", type = "h")
# #Compare(rawTable$altitude.ft, rawTable$pH)
# corFaults <- rawFault <- rawTable$fault
#
# rawTableMatrix <- matrix(c(rawTable))
# corrplot(rawTableMatrix) #, type = "upper", order = "hclust", col = brewer.pal(n = 8, name= "RdYlBu"))
#
#
#
# #with(rawTable, plot(rawTable$altitude.ft,rawTable$B))
x
X
x
X
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
X
X <- c(32, 18, 3, 45, 9, 56, 4, 10)X
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- subset(X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (X <= 10)
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X(X<= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X if >= 10
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (if X >= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- if X >= 10
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X$y(X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (X<= 10)
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (X<= [10])
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (X[i] <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for i in X{
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for y in X{
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for y in X
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X if (X <=10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X (X <=10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-  (X <=10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (X <=10)
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for (i in 1:X){
if i <=10
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for (X[i] in 1:X){
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for (Y in 1:X){
if i <=10
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for (Y in 1:X){
if X <=10
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
for (Y in 1:X){
if Y <=10
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- function(X)
l <- length(X)
for (i in 1:l){
if (X[i]<= 10){
returnValue(y)
}
}
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- function(X)
l <- length(X)
for (i in 1:l){
if (X[i]<= 10){
print TRUE
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X(,<= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- (X <= 10)
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- c(X <= 10)
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y == (X <= 10)
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X(X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- X (X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-  (X,X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-(X,X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-(X, X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-(X[] X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-(X[]( X <= 10))
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-(X( X <= 10))
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-(X(X <= 10))
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <-X <= 10
y
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- subset (X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- subset(X <= 10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
?subset
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
subset(X, X <=10)
X <- c(32, 18, 3, 45, 9, 56, 4, 10)
y <- subset(X, X <=10)
y
